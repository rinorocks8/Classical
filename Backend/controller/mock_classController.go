// Code generated by MockGen. DO NOT EDIT.
// Source: controller/classController.go

// Package controller is a generated GoMock package.
package controller

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClassController is a mock of ClassController interface.
type MockClassController struct {
	ctrl     *gomock.Controller
	recorder *MockClassControllerMockRecorder
}

// MockClassControllerMockRecorder is the mock recorder for MockClassController.
type MockClassControllerMockRecorder struct {
	mock *MockClassController
}

// NewMockClassController creates a new mock instance.
func NewMockClassController(ctrl *gomock.Controller) *MockClassController {
	mock := &MockClassController{ctrl: ctrl}
	mock.recorder = &MockClassControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClassController) EXPECT() *MockClassControllerMockRecorder {
	return m.recorder
}

// CreateClass mocks base method.
func (m *MockClassController) CreateClass(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateClass", arg0, arg1)
}

// CreateClass indicates an expected call of CreateClass.
func (mr *MockClassControllerMockRecorder) CreateClass(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClass", reflect.TypeOf((*MockClassController)(nil).CreateClass), arg0, arg1)
}

// DeleteClass mocks base method.
func (m *MockClassController) DeleteClass(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteClass", arg0, arg1)
}

// DeleteClass indicates an expected call of DeleteClass.
func (mr *MockClassControllerMockRecorder) DeleteClass(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClass", reflect.TypeOf((*MockClassController)(nil).DeleteClass), arg0, arg1)
}

// GetClasessByName mocks base method.
func (m *MockClassController) GetClasessByName(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetClasessByName", w, r)
}

// GetClasessByName indicates an expected call of GetClasessByName.
func (mr *MockClassControllerMockRecorder) GetClasessByName(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClasessByName", reflect.TypeOf((*MockClassController)(nil).GetClasessByName), w, r)
}

// GetClasses mocks base method.
func (m *MockClassController) GetClasses(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetClasses", arg0, arg1)
}

// GetClasses indicates an expected call of GetClasses.
func (mr *MockClassControllerMockRecorder) GetClasses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClasses", reflect.TypeOf((*MockClassController)(nil).GetClasses), arg0, arg1)
}

// GetSortedClasses mocks base method.
func (m *MockClassController) GetSortedClasses(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetSortedClasses", w, r)
}

// GetSortedClasses indicates an expected call of GetSortedClasses.
func (mr *MockClassControllerMockRecorder) GetSortedClasses(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSortedClasses", reflect.TypeOf((*MockClassController)(nil).GetSortedClasses), w, r)
}
